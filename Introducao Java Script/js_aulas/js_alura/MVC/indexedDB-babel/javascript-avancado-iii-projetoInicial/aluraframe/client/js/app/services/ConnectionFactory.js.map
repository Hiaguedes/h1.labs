{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAK;;AAE9B,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAS,CAAf;AACA,QAAMC,SAAS,YAAf;AACA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAO,IAAX;;AAEA;AACI,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;AACH;;AAHL;AAAA;AAAA,4CAI0B;;AAElB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA6BD,OAA7B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAI;;AAE9Bd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AAEH,qBAJD;;AAMAR,gCAAYS,SAAZ,GAAwB,aAAK;AACzB,4BAAG,CAACf,UAAJ,EAAe;AACXA,yCAAWY,EAAEC,MAAF,CAASC,MAApB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAM;AACrB,sCAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN,CADqB,CAC0C;AAClE,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AACH,qBATD;;AAWAM,gCAAYW,OAAZ,GAAsB,aAAK;AACvBZ,+BAAOO,EAAEC,MAAF,CAASK,KAAT,CAAeC,IAAtB;AACH,qBAFD;AAGH,iBAxBM,CAAP;AAyBH;AA/BL;AAAA;AAAA,0CAgCyBnB,UAhCzB,EAgCoC;AAC5BH,uBAAOuB,OAAP,CAAe,iBAAS;AACpB,wBAAGpB,WAAWqB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EACIvB,WAAWwB,iBAAX,CAA6BD,KAA7B;;AAEJvB,+BAAWyB,iBAAX,CAA6BF,KAA7B,EAAmC,EAACG,eAAe,IAAhB,EAAnC;AACH,iBALD;AAMH;AAvCL;AAAA;AAAA,8CAyC4B;AACpB,oBAAG1B,UAAH,EAAc;AACVC;AACAD,iCAAa,IAAb;AACH;AACJ;AA9CL;;AAAA;AAAA;AAgDC,CAxDuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (()=> {\r\n\r\nconst stores = ['negociacoes'];\r\nconst version =1;\r\nconst dbName = 'aluraframe';\r\nvar connection = null;\r\nvar close =null;\r\n\r\nreturn class ConnectionFactory {\r\n    constructor() {\r\n        throw new Error('Não se pode instanciar essa classe, classe estática');\r\n    }\r\n    static getConnection(){\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let openRequest = window.indexedDB.open(dbName,version);\r\n\r\n            openRequest.onupgradeneeded = e=> {\r\n\r\n                ConnectionFactory._createStores(e.target.result);\r\n\r\n            };\r\n\r\n            openRequest.onsuccess = e => {\r\n                if(!connection){\r\n                    connection=e.target.result;\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = () => {\r\n                        throw new Error('Você não pode fechar diretamente a conexão'); // monkey patching\r\n                    }\r\n                } \r\n                resolve(connection);\r\n            };\r\n\r\n            openRequest.onerror = e => {\r\n                reject(e.target.error.name);\r\n            };\r\n        });\r\n    }\r\n    static _createStores(connection){\r\n        stores.forEach(store => {\r\n            if(connection.objectStoreNames.contains(store)) \r\n                connection.deleteObjectStore(store);\r\n\r\n            connection.createObjectStore(store,{autoIncrement: true});\r\n        })\r\n    }\r\n\r\n    static closeConnection(){\r\n        if(connection){\r\n            close();\r\n            connection = null;\r\n        }\r\n    }\r\n}\r\n})();\r\n\r\n"]}