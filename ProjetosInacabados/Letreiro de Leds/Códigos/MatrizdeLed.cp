#line 1 "C:/Users/Hiago/Desktop/h1.labs/Letreiro de Leds/Códigos/MatrizdeLed.c"
unsigned const short Alphabet[156]={
 0x7f, 0x88, 0x88, 0x88, 0x88, 0x7f,
 0xff, 0x91, 0x91, 0x91, 0x91, 0x6e,
 0x7e, 0x81, 0x81, 0x81, 0x81, 0x42,
 0xff, 0x81, 0x81, 0x81, 0x81, 0x7e,
 0x81, 0xff, 0x91, 0x91, 0x91, 0x91,
 0x81, 0xff, 0x91, 0x90, 0x90, 0x80,
 0x7e, 0x81, 0x81, 0x89, 0x89, 0x4e,
 0xff, 0x10, 0x10, 0x10, 0x10, 0xff,
 0x00, 0x81, 0xff, 0xff, 0x81, 0x00,
 0x06, 0x01, 0x81, 0xfe, 0x80, 0x00,
 0x81, 0xff, 0x99, 0x24, 0xc3, 0x81,
 0x81, 0xff, 0x81, 0x01, 0x01, 0x03,
 0xff, 0x60, 0x18, 0x18, 0x60, 0xff,
 0xff, 0x60, 0x10, 0x08, 0x06, 0xff,
 0x7e, 0x81, 0x81, 0x81, 0x81, 0x7e,
 0x81, 0xff, 0x89, 0x88, 0x88, 0x70,
 0x7e, 0x81, 0x85, 0x89, 0x87, 0x7e,
 0xff, 0x98, 0x98, 0x94, 0x93, 0x61,
 0x62, 0x91, 0x91, 0x91, 0x91, 0x4e,
 0xc0, 0x81, 0xff, 0xff, 0x81, 0xc0,
 0xfe, 0x01, 0x01, 0x01, 0x01, 0xfe,
 0xfc, 0x02, 0x01, 0x01, 0x02, 0xfc,
 0xff, 0x02, 0x04, 0x04, 0x02, 0xff,
 0xc3, 0x24, 0x18, 0x18, 0x24, 0xc3,
 0xc0, 0x20, 0x1f, 0x1f, 0x20, 0xc0,
 0xc3, 0x85, 0x89, 0x91, 0xa1, 0xc3,
 };
 unsigned const short Nums[60]={
 0x00 , 0x7E , 0xA1 , 0x91 , 0x89 , 0x7E,
 0x00 , 0x21 , 0x41 , 0xFF , 0x01 , 0x01,
 0x00 , 0x4F , 0x91 , 0x91 , 0x91 , 0x61,
 0x00 , 0x82 , 0x81 , 0x91 , 0xB3 , 0xCE,
 0x08 , 0x18 , 0x28 , 0x48 , 0xFF , 0x08,
 0xF2 , 0x91 , 0x91 , 0x91 , 0x91 , 0x8E,
 0x3E , 0x49 , 0x89 , 0x89 , 0x89 , 0x46,
 0x00 , 0xC0 , 0x80 , 0x80 , 0x8F , 0xF0,
 0x76 , 0x89 , 0x89 , 0x89 , 0x89 , 0x76,
 0x00 , 0x62 , 0x91 , 0x91 , 0x91 , 0x7E
 } ;

 unsigned const short alphabet_littlecase[156]={
 0x06 , 0x49 , 0x49 , 0x49 , 0x49 , 0x3E,
 0x00 , 0x3E , 0x09 , 0x09 , 0x09 , 0x06,
 0x0E , 0x11 , 0x11 , 0x11 , 0x11 , 0x00,
 0x00 , 0x0E , 0x11 , 0x11 , 0x09 , 0x7F,
 0x00 , 0x0E , 0x15 , 0x15 , 0x0D , 0x00,
 0x00 , 0x08 , 0x1F , 0x28 , 0x20 , 0x00,
 0x08 , 0x15 , 0x15 , 0x15 , 0x1E , 0x00,
 0x00 , 0x7F , 0x04 , 0x08 , 0x08 , 0x07,
 0x00 , 0x00 , 0x2F , 0x00 , 0x00 , 0x00,
 0x02 , 0x01 , 0x01 , 0x2E , 0x00 , 0x00,
 0x00 , 0x00 , 0x3F , 0x04 , 0x0A , 0x11,
 0x00 , 0x21 , 0x3F , 0x01 , 0x00 , 0x00,
 0x00 , 0x3F , 0x10 , 0x0F , 0x10 , 0x0F,
 0x00 , 0x1F , 0x08 , 0x10 , 0x10 , 0x0F,
 0x0E , 0x11 , 0x11 , 0x11 , 0x0E , 0x00,
 0x00 , 0x1F , 0x24 , 0x24 , 0x24 , 0x18,
 0x00 , 0x18 , 0x24 , 0x24 , 0x24 , 0x1F,
 0x00 , 0x1F , 0x08 , 0x10 , 0x10 , 0x08,
 0x08 , 0x15 , 0x15 , 0x15 , 0x15 , 0x12,
 0x00 , 0x10 , 0x7E , 0x11 , 0x00 , 0x00,
 0x00 , 0x1E , 0x01 , 0x01 , 0x01 , 0x1E,
 0x00 , 0x18 , 0x06 , 0x01 , 0x06 , 0x18,
 0x00 , 0x1E , 0x01 , 0x1E , 0x01 , 0x1E,
 0x11 , 0x12 , 0x0E , 0x09 , 0x11 , 0x00,
 0x00 , 0x38 , 0x05 , 0x05 , 0x05 , 0x3E,
 0x11 , 0x13 , 0x15 , 0x19 , 0x11 , 0x00


 };

 unsigned const short acentuacao[156]={

 0x00 , 0x03 , 0x15 , 0x55 , 0x95 , 0x0E,
 0x00 , 0x03 , 0x55 , 0x95 , 0x95 , 0x5E,
 0x40 , 0x83 , 0x95 , 0x55 , 0x55 , 0x8F,
 0x00 , 0x0E , 0x15 , 0x55 , 0x8D , 0x00,
 0x00 , 0x0E , 0x55 , 0x95 , 0x4D , 0x00,
 0x00 , 0x00 , 0x00 , 0x1F , 0x40 , 0x80,
 0x00 , 0x0E , 0x11 , 0x51 , 0x91 , 0x0E,
 0x00 , 0x0E , 0x51 , 0x91 , 0x51 , 0x0E,
 0x40 , 0x8E , 0x91 , 0x51 , 0x51 , 0x8E,
 0x00 , 0x1E , 0x01 , 0x41 , 0x81 , 0x1E

 };

 unsigned const short Symbols[136]={
 0x00, 0x3c, 0x42, 0x81, 0x00, 0x00,
 0x00, 0x00, 0x81, 0x42, 0x3c, 0x00,
 0x00, 0x00, 0xff, 0x81, 0x00, 0x00,
 0x00, 0x00, 0x81, 0xff, 0x00, 0x00,
 0x00, 0x18, 0xe7, 0x81, 0x00, 0x00,
 0x00, 0x00, 0x81, 0xe7, 0x18, 0x00,
 0x00, 0x18, 0x24, 0x42, 0x81, 0x00,
 0x00, 0x81, 0x42, 0x24, 0x18, 0x00,
 0x00, 0x03, 0x0c, 0x30, 0xc0, 0x00,
#line 99 "C:/Users/Hiago/Desktop/h1.labs/Letreiro de Leds/Códigos/MatrizdeLed.c"
 0x00, 0xc0, 0x30, 0x0c, 0x03, 0x00,
 0x00, 0x00, 0xfd, 0xfd, 0x00, 0x00,
 0x60, 0x80, 0x8d, 0x8d, 0x90, 0x60,
 0x42, 0x24, 0xff, 0xff, 0x24, 0x42,
 0x24, 0xff, 0x24, 0x24, 0xff, 0x24,
 0x62, 0x91, 0xff, 0xff, 0x91, 0x4e,
 0x66, 0x99, 0x99, 0x66, 0x09, 0x00,
 0x42, 0xa4, 0x48, 0x12, 0x25, 0x42,
 0x20, 0x3f, 0x20, 0x20, 0x3e, 0x21,
 0x00,0x00,0x66,0x66,0x00,0x00,
 0x08 , 0x08 , 0x3E , 0x08 , 0x08 , 0x00,
 0x08 , 0x08 , 0x08 , 0x08 , 0x08 , 0x00,
 0x04 , 0x12 , 0x02 , 0x02 , 0x12 , 0x04,
 };


sbit Chip_Select at RC0_bit;
sbit Chip_Select_Direction at TRISC0_bit;




void max7219_init(int maxrow, int maxcolumn)
{
 int lc;
 if(maxrow == 0 && maxcolumn == 0) lc=0;
 if(maxrow == 0 && maxcolumn == 1) lc=1;
 if(maxrow == 1 && maxcolumn == 0) lc=10;
 if(maxrow == 1 && maxcolumn == 1) lc=11;

 switch(lc){
 case 0:

 Chip_Select = 0;
SPI1_write(0x09);
SPI1_write(0x00);
Chip_Select = 1;

Chip_Select = 0;
SPI1_write(0x0A);
SPI1_write(0x0F);
Chip_Select = 1;

Chip_Select = 0;
SPI1_write(0x0B);
SPI1_write(0x07);
Chip_Select = 1;

Chip_Select = 0;
SPI1_write(0x0C);
SPI1_write(0x01);
Chip_Select = 1;

Chip_Select = 0;
SPI1_write(0x00);
SPI1_write(0xFF);
Chip_Select = 1;
 break;


 case 1:

 Chip_Select = 0;
 SPI1_write(0x09);
 SPI1_write(0x00);
 SPI1_write(0x00);
 SPI1_write(0x00);
 Chip_Select= 1;

 Chip_Select= 0;
 SPI1_write(0x0A);
 SPI1_write(0x0F);
 SPI1_write(0x00);
 SPI1_write(0x00);
 Chip_Select = 1;

 Chip_Select = 0;
 SPI1_write(0x0B);
 SPI1_write(0x07);
 SPI1_write(0x00);
 SPI1_write(0x00);
 Chip_Select = 1;

 Chip_Select= 0;
 SPI1_write(0x0C);
 SPI1_write(0x01);
 SPI1_write(0x00);
 SPI1_write(0x00);
 Chip_Select = 1;

 Chip_Select = 0;
 SPI1_write(0x00);
 SPI1_write(0xFF);
 SPI1_write(0x00);
 SPI1_write(0x00);
 Chip_Select = 1;
 break;
 }

}




void Write_Byte(unsigned short myColumn, unsigned short myValue,unsigned int maxrow,unsigned int maxcolumn)
{
 int lc;
 if(maxrow == 0 && maxcolumn == 0) lc=0;
 if(maxrow == 0 && maxcolumn == 1) lc=1;
 if(maxrow == 1 && maxcolumn == 0) lc=10;
 if(maxrow == 1 && maxcolumn == 1) lc=11;

 switch(lc){
 case 0:

 Chip_Select = 0;
 SPI1_write(myColumn);
 SPI1_write(myValue);
 Chip_Select = 1;
 break;

 case 1:

 Chip_Select = 0;

 SPI1_write(myColumn);
 SPI1_write(myValue);
 SPI1_write(0x00);
 SPI1_write(0x00);

 Chip_Select = 1;
 break;
 }
 }


void Clear_Matrix(void)
{
unsigned short x;

for(x=1;x<9;x++)
{
 Write_Byte(x,0x00,0,0);
 Write_Byte(x,0x00,0,1);
 }
}

void Write_Char(char myChar,int maxrow,int maxcolumn)
{
unsigned short Column, Start_Byte;
int lc;
Clear_Matrix();


Start_Byte = (myChar - 65) * 6;



 if(maxrow==0 && maxcolumn==0) lc=0;
 if(maxrow==0 && maxcolumn==1) lc=1;
 if(maxrow==1 && maxcolumn==0) lc=10;
 if(maxrow==1 && maxcolumn==1) lc=11;

 switch(lc){

 case 0:

 for(Column=2;Column<8;Column++)
{
 Write_Byte(Column, Alphabet[Start_Byte++],0,0);
 }break;

 case 1:
 for(Column=2;Column<8;Column++)
{
 Write_Byte(Column, Alphabet[Start_Byte++],0,1);
 }break;

}

 }




 void Write_Little_Char(char myChar, int maxrow, int maxcolumn)
{
unsigned short Column, Start_Byte;
 int lc;
Clear_Matrix();


Start_Byte = (myChar - 97) * 6;



 if(maxrow==0 && maxcolumn==0) lc=0;
 if(maxrow==0 && maxcolumn==1) lc=1;
 if(maxrow==1 && maxcolumn==0) lc=10;
 if(maxrow==1 && maxcolumn==1) lc=11;

 switch(lc){
 case 0:
 for(Column=2;Column<8;Column++)
{
 Write_Byte(Column, alphabet_littlecase[Start_Byte++],0,0);
 } break;
 case 1:

 for(Column=2;Column<8;Column++)
{
 Write_Byte(Column, alphabet_littlecase[Start_Byte++],0,1);
 } break;

 }


}

void Write_Num(int myNum,int maxrow,int maxcolumn)
{
unsigned short Column, Start_Byte;
int lc;





Clear_Matrix();


Start_Byte = (myNum) * 6;



 if(maxrow==0 && maxcolumn==0) lc=0;
 if(maxrow==0 && maxcolumn==1) lc=1;
 if(maxrow==1 && maxcolumn==0) lc=10;
 if(maxrow==1 && maxcolumn==1) lc=11;


 switch(lc){
 case 0:
 for(Column=2;Column<8;Column++)
{
 Write_Byte(Column, Nums[Start_Byte++],0,0);
 } break;
 case 1:
 for(Column=2;Column<8;Column++)
{
 Write_Byte(Column, Nums[Start_Byte++],0,1);
 }break;


 }
}



void Write_Symbol(char mysymbols,int maxrow, int maxcolumn)
{
unsigned short Column1, Start_Byte1;
int lc;





Clear_Matrix();


Start_Byte1 = (mysymbols-0) * 6 ;

 switch(mysymbols){
 case '(': Start_Byte1=0;break;
 case ')':Start_Byte1=6;break;
 case '[': Start_Byte1=12;break;
 case ']':Start_Byte1=18;break;
 case '{': Start_Byte1=24;break;
 case '}':Start_Byte1=30;break;
 case '<': Start_Byte1=36;break;
 case '>':Start_Byte1=42;break;
 case '/': Start_Byte1=48;break;
 case '\ ':Start_Byte1=54;break;
 case ' ':Start_Byte1=6*10;break;
 case '!':Start_Byte1=6*11;break;
 case '?':Start_Byte1=6*12;break;
 case '*':Start_Byte1=6*13;break;
 case '#':Start_Byte1=6*14;break;
 case '$':Start_Byte1=6*15;break;
 case '&':Start_Byte1=6*16;break;
 case '%':Start_Byte1=6*17;break;
 case 'p':Start_Byte1=6*18;break;
 case ';':Start_Byte1=6*19;break;
 case '+':Start_Byte1=6*20;break;
 case '-':Start_Byte1=6*21;break;
 case 'h':Start_Byte1=6*22;break;
 }

 if(maxrow==0 && maxcolumn==0) lc=0;
 if(maxrow==0 && maxcolumn==1) lc=1;
 if(maxrow==1 && maxcolumn==0) lc=10;
 if(maxrow==1 && maxcolumn==1) lc=11;

 switch(lc){
 case 0:
 for(Column1=2;Column1<8;Column1++)
{
 Write_Byte(Column1, Symbols[Start_Byte1++],0,0);
 }

 case 1:
 for(Column1=2;Column1<8;Column1++)
{
 Write_Byte(Column1, Symbols[Start_Byte1++],0,1);
 }

 }



}

void Write_acento(char myacento,int maxrow, int maxcolumn){

 unsigned short Column1, Start_Byte1;
 int lc;
 Clear_Matrix();



 if(maxrow==0 && maxcolumn==0) lc=0;
 if(maxrow==0 && maxcolumn==1) lc=1;
 if(maxrow==1 && maxcolumn==0) lc=10;
 if(maxrow==1 && maxcolumn==1) lc=11;

 switch(myacento) {
 case 'á': Start_Byte1=0;break;
 case 'â':Start_Byte1=6;break;
 case 'ã': Start_Byte1=12;break;
 case 'é':Start_Byte1=18;break;
 case 'ê': Start_Byte1=24;break;
 case 'í':Start_Byte1=30;break;
 case 'ó': Start_Byte1=36;break;
 case 'ô':Start_Byte1=42;break;
 case 'õ': Start_Byte1=48;break;
 case 'ú':Start_Byte1=54;break;
 }

 switch(lc){
 case 0:

 for(Column1=2;Column1<8;Column1++)
{
 Write_Byte(Column1, acentuacao[Start_Byte1++],0,0);
 } break;

 case 1:
 for(Column1=2;Column1<8;Column1++)
{
 Write_Byte(Column1, acentuacao[Start_Byte1++],0,1);
 } break;
 }

}

 void Char_scroll_left(char myChar,int row,int begin_column,int end_column,int begin_max,int end_max){
 unsigned short Display_Byte[8],Display_Byte_rec_0[8],Display_Byte_rec_1[8];
 unsigned short i,j,StartByte,n,m=0,c;

 m==end_max-begin_max+1;
 StartByte = (myChar - 97) * 6;
 for(i=0;i<6;i++){
 Display_Byte[i]== Alphabet[StartByte + i];
 }
 for(i=0;i<8;i++){
 Display_Byte_rec_0[i]==Display_Byte[i];
 }


 if(end_max!=begin_max) {c=0; }
 if(end_max==begin_max) {c=1; }
 switch(c){

 case 1:
 m= 7*(end_max-begin_max);n= (begin_column-end_column);
 for(j=0;j<0;j++){
 for(i=0;i<n;i++){
 Write_Byte(begin_column-i,Display_Byte[j],row,begin_max);
 }
 Delay_ms(50);
 Clear_Matrix();
 Display_Byte[i]>>1;
 Delay_ms(50);

 } break;
 case 0:
 n= (begin_column-end_column);
 break;

 }
 }


 void led_string(const char *s,int row,int begin_column,int end_column,int begin_max,int end_max)
{
while(*s) Char_scroll_left(*s++,row,begin_column,end_column,begin_max,end_max);
}


 int aux=5;int aux1=2,i=8;
 unsigned int n=0,row=0,column=0;
unsigned const short array;


void main()
{
 TRISA.RA0 = 1;



Chip_Select_Direction = 0;
SPI1_init();

max7219_init(0,0);
max7219_init(0,1);

Clear_Matrix();

while(1)
{

 Char_scroll_left('A',0,8,0,0,0);
#line 561 "C:/Users/Hiago/Desktop/h1.labs/Letreiro de Leds/Códigos/MatrizdeLed.c"
 }
 }
