[1mdiff --git a/git-e-github/git.md b/git-e-github/git.md[m
[1mindex 781275f..51dbf34 100644[m
[1m--- a/git-e-github/git.md[m
[1m+++ b/git-e-github/git.md[m
[36m@@ -1,4 +1,4 @@[m
[31m-# Git[m
[32m+[m[32m# Git e Github[m
 [m
 O git √© um sistema de controle de vers√µes (version control system em ingl√™s ou VCS), e √© feito para que as pessoas consigam mandar seus projetos e c√≥digos para um servidor remoto e as pessoas que estiverem trabalhando nele tem que sempre ter a vers√£o mais atual do c√≥digo na sua m√°quina.[m
 [m
[36m@@ -40,7 +40,7 @@[m [mgit status[m
 [m
 Como pode se ver na figura abaixo:[m
 [m
[31m-![Comando status](/img/status.png)[m
[32m+[m[32m![Comando status](img/status.png)[m
 [m
 Que mostra que criamos o arquivo na pasta git-e-github e que ela ainda n√£o foi comitada. E estamos no master, ainda n√£o tem nenhuma ramifica√ß√£o na pasta[m
 [m
[36m@@ -60,7 +60,7 @@[m [mgit add .[m
 [m
 Isso muda nossa bash para[m
 [m
[31m-![Comando add](/img/add.png)[m
[32m+[m[32m![Comando add](img/add.png)[m
 [m
 E esse add dura enquanto o arquivo n√£o tenha sido modificado[m
 [m
[36m@@ -93,7 +93,7 @@[m [mPara ver o hist√≥rico das altera√ß√£o eu digito[m
 git log[m
 ```[m
 [m
[31m-![Comando log](/img/log.png)[m
[32m+[m[32m![Comando log](img/log.png)[m
 [m
 E nele eu vejo email, o nome do autor, a data de altera√ß√£o e o local do commit, tal como anota√ß√µes e coisas a mais desde a cria√ß√£o do reposit√≥rio, enter para ir vendo linha a linha e espa√ßo para ir mais r√°pido.[m
 [m
[36m@@ -176,7 +176,7 @@[m [mUma forma de inicializar um servidor remoto √© com:[m
 [m
 Lembrando que pode ser uma URL[m
 [m
[31m-![Comando remote](/img/remote.png)[m
[32m+[m[32m![Comando remote](img/remote.png)[m
 [m
 Fetch eu busco as informa√ß√µes de l√° e push eu jogo as informa√ß√µes para l√° tamb√©m, esses locais podem ser diferentes mas n√£o √© o caso. Ent√£o para pegar a pasta de um servidor remoto eu coloco:[m
 [m
[36m@@ -199,4 +199,150 @@[m [mgit remote rename origin local[m
 git pull local master[m
 ```[m
 [m
[31m-Sobre branches isso vai ser discutido em outro arquivo (ou n√£o)[m
[32m+[m[32mSobre branches isso vai ser discutido em outro arquivo[m
[32m+[m
[32m+[m[32m## Github[m
[32m+[m
[32m+[m[32mO github √© um servidor dedicado para voc√™ que quer fazer um projeto e por um acaso n√£o tem um servidor dedicado para isso (maioria de n√≥s). E esse site √© bem legal pois no site voc√™ pode adicionar colaboradores ao seu projeto e ver em interface gr√°fica outras coisas tamb√©m.[m
[32m+[m
[32m+[m[32mPor padr√£o o servidor do github √© chamado como origin e √© bom manter todo mundo com o mesmo nome para que as coisas fiquem mais alinhadas.[m
[32m+[m
[32m+[m[32m### Exerc√≠cio[m
[32m+[m
[32m+[m[32m1) Crie uma pasta nova em seu computador;[m
[32m+[m
[32m+[m[32m2) No terminal (ou Git Bash, no Windows) navegue at√© a pasta rec√©m criada (utilize o comando cd para navegar entre pastas);[m
[32m+[m
[32m+[m[32m3) Execute o comando git init --bare;[m
[32m+[m
[32m+[m[32m4) Navegue at√© a pasta onde se encontra o seu projeto;[m
[32m+[m
[32m+[m[32m5) Execute o comando git remote add local {caminho}. Substitua {caminho} pelo caminho completo da pasta rec√©m criada;[m
[32m+[m
[32m+[m[32m6) Crie uma nova pasta em seu computador, para representar o trabalho de outra pessoa;[m
[32m+[m
[32m+[m[32m7) No terminal (ou Git Bash, no Windows) navegue at√© a pasta rec√©m criada;[m
[32m+[m
[32m+[m[32m8) Execute o comando git clone {caminho} projeto. Substitua {caminho} pelo caminho completo da pasta que criamos no primeiro passo;[m
[32m+[m
[32m+[m[32m9) Observe que o reposit√≥rio clonado est√° vazio;[m
[32m+[m
[32m+[m[32m10) Execute o comando 'git remote rename origin local' para renomear o reposit√≥rio local da outra pessoa de "origin" para "local";[m
[32m+[m
[32m+[m[32m11) Navegue at√© a pasta onde se encontra o seu projeto original;[m
[32m+[m
[32m+[m[32m12) Execute o comando git push local master para enviar as suas modifica√ß√µes para o seu servidor;[m
[32m+[m
[32m+[m[32m13) Navegue at√© a pasta criada no passo 6;[m
[32m+[m
[32m+[m[32m14) Execute o comando git pull local master para baixar as modifica√ß√µes;[m
[32m+[m
[32m+[m[32m15) Abra o seu navegador e acesse <http://github.com/>[m
[32m+[m
[32m+[m[32m16) Crie uma conta;[m
[32m+[m
[32m+[m[32m17) Crie um novo reposit√≥rio, clicando no s√≠mbolo de adi√ß√£o no canto superior direito;[m
[32m+[m
[32m+[m[32m18) No terminal (ou Git Bash, no Windows) adicione, ao seu projeto inicial, o reposit√≥rio remoto rec√©m criado (os comandos s√£o mostrados pelo pr√≥prio GitHub);[m
[32m+[m
[32m+[m[32m19) Execute git push origin master para enviar as suas altera√ß√µes para o reposit√≥rio no GitHub.[m
[32m+[m
[32m+[m[32m## Branches[m
[32m+[m
[32m+[m[32mBranches ("ramos") s√£o utilizados para desenvolver funcionalidades isoladas umas das outras. A branch master √© a branch "padr√£o" quando voc√™ cria um reposit√≥rio.[m
[32m+[m
[32m+[m[32m√â interessante separar o desenvolvimento de funcionalidades em branches diferentes, para que as mudan√ßas no c√≥digo para uma n√£o influencie no funcionamento de outra.[m
[32m+[m
[32m+[m[32mNesta aula, entenderemos melhor como trabalhar com estes ramos, mas √© muito importante que voc√™ entenda seu prop√≥sito.[m
[32m+[m
[32m+[m[32mPra que n√£o aja conflito entre pessoas trabalhando em um c√≥digo eu crio uma ramifica√ß√£o do c√≥digo e informo que aquele branch est√° servindo para que eu posso trabalhar em um trecho espec√≠fico do meu c√≥digo com[m
[32m+[m
[32m+[m[32m```git[m
[32m+[m[32mgit branch <nome>[m
[32m+[m[32mgit checkout <nome>[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32mCom isso eu estou totalmente voltado para a ramifica√ß√£o e n√£o no principal[m
[32m+[m
[32m+[m[32mO comando chechkout serve para eu possa justamente alterar meu desenvolvimento de modo a atuar somente na branch titulo que eu criei na primeira linha[m
[32m+[m
[32m+[m[32mIsso faz com que eu crie diferentes linhas de desenvolvimento[m
[32m+[m
[32m+[m[32m![Linhas de desenvolvimento usando o <https://git-school.github.io/visualizing-git/>](img/visualizando.png)[m
[32m+[m
[32m+[m[32mOnde eu tenho uma linha que √© a master e a outra que √© a forms.[m
[32m+[m
[32m+[m[32mUm comando direto para eu criar a branch e j√° passar para ela √© com[m
[32m+[m
[32m+[m[32m```git[m
[32m+[m[32mgit checkout -b <nome>[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32mOnde o comando `checkout` muda nosso `HEAD` nos fazendo olhar diretamente para o branch que criamos[m
[32m+[m
[32m+[m[32mOnde normalmente se trata a branch master como a principal, onde no final tudo dever√° estar aqui, como junto tudo? Como mesclo essas informa√ß√µes[m
[32m+[m
[32m+[m[32mCom isso eu vou para a branch master e dou um[m
[32m+[m
[32m+[m[32m```git[m
[32m+[m[32mgit checkout master[m
[32m+[m[32mgit merge <nome da branch>[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32m![Visualiza√ß√£o de um merge](img/merge.png)[m
[32m+[m
[32m+[m[32mIsso cria um commit de merge no nosso projeto[m
[32m+[m
[32m+[m[32mUma forma mais limpa de fazer essa mescla √© trazer os commits da branch para antes do commit com a brnach master e para isso eu fa√ßo[m
[32m+[m
[32m+[m[32m```git[m
[32m+[m[32mgit checkout master[m
[32m+[m[32mgit rebase <nome da branch>[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32mA vis√£o √© essa[m
[32m+[m
[32m+[m[32m![Utilizando o rebase](img/rebase.png)[m
[32m+[m
[32m+[m[32mO flow foi esse[m
[32m+[m
[32m+[m[32m```git[m
[32m+[m[32mgit commit[m
[32m+[m[32mgit branch css[m
[32m+[m[32mgit checkout css[m
[32m+[m[32mgit commit -m "alterando barnav"[m
[32m+[m[32mgit commit -m "mudando footer"[m
[32m+[m[32mgit checkout master[m
[32m+[m[32mgit commit -m "corrigindo bug"[m
[32m+[m[32mgit rebase css[m
[32m+[m[32m```[m
[32m+[m
[32m+[m[32mE com isso eu coloquei todos os commits da branch css para tr√°s da git commit e juntei tudo em uma linha de desenvolvimento s√≥.[m
[32m+[m
[32m+[m[32mCom `git log --graph` eu consigo ver via terminal as linhas de desenvolvimento do meu projeto[m
[32m+[m
[32m+[m[32mCom isso, evitamos os commits de merge. H√° uma longa discuss√£o sobre o que √© "melhor": rebase ou merge. Estude, pesquise, e tire suas pr√≥prias conclus√µes. Aqui tem um artigo (de milhares outros) que cita o assunto: <https://medium.com/datadriveninvestor/git-rebase-vs-merge-cc5199edd77c>. No fundo os dois fazem a mesma coisa, √© mais uma quest√£o de hist√≥rico mesmo.[m
[32m+[m
[32m+[m[32m## E se eu estiver editando a mesma parte do c√≥digo ?[m
[32m+[m
[32m+[m[32mSe eu que estou na mastar altero o titulo da pagina, e outra pessoa que est√° em outra branch tamb√©m mudar o titulo da p√°gina ent√£o temos um conflito, o visual studio nos indicar√° com cores diferentes onde est√° o conflito e a√≠ o master resolve quem sugeriu a melhor mudan√ßa de forma manual mesmo (h√° formas de resolver isso automaticamente mas isso √© para depois). E sempre que voc√™ for trabalhar fa√ßa o pull.[m
[32m+[m
[32m+[m[32m![Conflito dado entre as duas branchs quando tentei mesclar](img/conflito.png)[m
[32m+[m
[32m+[m[32mE escolho a melhor mudan√ßa (ao menos no visual code que √© a incomming change, a change vinda da branch github √© melhor)[m
[32m+[m
[32m+[m[32m### Exerc√≠cio[m
[32m+[m
[32m+[m[32mVimos como √© simples resolver conflitos identificados pelo Git ao tentar realizar o merge.[m
[32m+[m
[32m+[m[32mAgora, gere um conflito e, ao inv√©s de utilizar o merge, utilize o rebase para atualizar o master:[m
[32m+[m
[32m+[m[32m- V√° para a branch titulo[m
[32m+[m
[32m+[m[32m- Commite algo[m
[32m+[m
[32m+[m[32m- V√° para a branch master, commite uma altera√ß√£o na mesma linha[m
[32m+[m
[32m+[m[32m- Execute git rebase titulo[m
[32m+[m
[32m+[m[32mVeja a sa√≠da do Git e utilize as informa√ß√µes que ela te der para, ap√≥s corrigir o conflito, continuar o rebase.[m
[1mdiff --git a/git-e-github/img/conflito.png b/git-e-github/img/conflito.png[m
[1mnew file mode 100644[m
[1mindex 0000000..bfcd12c[m
Binary files /dev/null and b/git-e-github/img/conflito.png differ
[1mdiff --git a/git-e-github/img/merge.png b/git-e-github/img/merge.png[m
[1mnew file mode 100644[m
[1mindex 0000000..bc4a362[m
Binary files /dev/null and b/git-e-github/img/merge.png differ
[1mdiff --git a/git-e-github/img/rebase.png b/git-e-github/img/rebase.png[m
[1mnew file mode 100644[m
[1mindex 0000000..cfe65bd[m
Binary files /dev/null and b/git-e-github/img/rebase.png differ
[1mdiff --git a/git-e-github/img/visualizando.png b/git-e-github/img/visualizando.png[m
[1mnew file mode 100644[m
[1mindex 0000000..fe91127[m
Binary files /dev/null and b/git-e-github/img/visualizando.png differ
